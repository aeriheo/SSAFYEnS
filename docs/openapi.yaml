openapi: 3.0.1
info:
  title: S05P12A109
  description: |-
    <li>읽으실때 복수형 구분에 유의하세요! 실수했을 수도 있으니 어? 얜 array인데 왜 단수형이 붙어있지나 vice versa 알려주세요</li>
    <li>각 회원의 정보(user_id)는 jwt를 통해 취득합니다</li>
    <li>response의 코드 등도 제대로 되어있지 않으니, 클라이언트측 parameter와 requestbody(JSON), 그리고 서버측 response JSON 위주로 확인바랍니다</li>
    <li>200이 아닌 response는 굳이 필요한가요?</li><li>operationId는 CRUD를 따서 create, get(read아닙니다), update, delete와 parameter를 사용하는 경우 By{parameter}를 뒤에 붙였습니다. (예외 checkGroupName)</li>
    <li>0729 논의해본 결과 schedule에 일, 주, 월, 년?을 넣어서 쉽게 접근할 수 있도록 바꿨습니다. 혹시 날짜와 관련된 내용인데 schedule을 참조(ref)하고 있지 않으면 제보바랍니다</li>
    <li>required 가 문제를 일으키는 것 같아 path parameter를 제외하고 required는 전부 주석처리했습니다</li>
    <li>schedule에 expectstart_at 시작예정시각 속성을 추가했습니다</li>
    <li>ReqeustBody, Response는 모두 application/json으로 통일합니다.</li>
#   termsOfService: http://swagger.io/terms/
#   contact:
#     email: apiteam@swagger.io
#   license:
#     name: Apache 2.0
#     url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
# externalDocs:
#   description: Find out more about Swagger
#   url: http://swagger.io
servers:
- url: https://i5a109.p.ssafy.io:3308
- url: http://i5a109.p.ssafy.io:3308
- url: http://localhost:8079
tags:
- name: schedule
  description: Everything about your schedules
  # externalDocs:
  #   description: Find out more
  #   url: http://swagger.io
# - name: store
#   description: Access to Schedules
- name: user
  description: Operations about user
- name: average
  description: 통계를 위한 내용입니다
- name: group
  description: 그룹에 관한 내용입니다
  # externalDocs:
  #   description: Find out more about our store
  #   url: http://swagger.io
    
paths:

  /schedule:
  
    post:
      tags:
      - schedule
      summary: Add a new schedule to user
      description: |-
        schedule_id, user_id, finished_at, created_at, updated_at, point, is_finished, noti_extend는 불필요 //
        date, title, context, started_at, deadline_at, notification만 받으면 되는 것 같은데?
        schedule에 date, week, month 정보를 넣어놓으면 한 번에 조회 가능해서 간편해질 듯 하다.
      operationId: createSchedule
      requestBody:
        # required: true
        description: Schedule object that needs to be added to the user
        content:
          application/json:
            schema:
              properties:
                date:
                  $ref: '#/components/schemas/schedule/properties/date'
                title:
                  $ref: '#/components/schemas/schedule/properties/title'
                context:
                  $ref: '#/components/schemas/schedule/properties/context'
                started_at:
                  $ref: '#/components/schemas/schedule/properties/started_at'
                deadline_at:
                  $ref: '#/components/schemas/schedule/properties/deadline_at'
                notification:
                  $ref: '#/components/schemas/schedule/properties/notification'
                
              # $ref: '#/components/schemas/schedule'
              # 제외해야할 properties 발생
      responses:
        200:
          $ref: '#/components/responses/200schedule'
        # 200:
        #   description: 'successful operation: 해당 일정의 정보를 돌려줌'
        #   content:
        #     application/json:
        #       schema:
        #         $ref: '#/components/schemas/schedule'
                
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
          
      security:
      - JWT: []
      
  /schedule/{schedule_id}:
  
    get:
      tags:
      - schedule
      summary: Find schedule by ID
      description: Returns a single schedule
      operationId: getScheduleById
      parameters:
      - name: schedule_id
        in: path
        description: ID of schedule to return
        required: true
        schema:
          type: integer
      responses:
        200:
          $ref: '#/components/responses/200schedule'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Schedule not found
          content: {}
      security:
      - JWT: []
      
    put:
      tags:
      - schedule
      summary: Updates a schedule with JSON data
      operationId: updateScheduleById
      description: requestBody 일일이 입력해줬지만... 맞나? $ref로 불러오는게 맞는거같은데 / PUT요청에 (is_finished가 true면) daily/weekly/monthly 업데이트 필요
      parameters:
      - name: schedule_id
        in: path
        description: ID of schedule that needs to be updated
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                title:
                  type: string
                  description: Updated name of the schedule
                context:
                  type: string
                  description: Updated context of the schedule
                started_at:
                  type: string
                  description: Updated started_at of the schedule
                  format: datetime
                deadline_at:
                  type: string
                  description: Updated deadline_at of the schedule
                  format: datetime
                point:
                  type: integer
                  description: Updated point of the schedule
                  format: int32
                is_finished:
                  type: boolean
                  description: Updated is_finished of the schedule
                notification:
                  type: string
                  description: Updated notification of the schedule
                noti_extend:
                  type: integer
                  description: Updated noti_extend of the schedule
                  format: int32
                humidity:
                  $ref: '#/components/schemas/schedule/properties/humidity'
                  # type: integer
                  # description: 습도
                illuminance:
                  $ref: '#/components/schemas/schedule/properties/illuminance'
                  # type: integer
                  # description: 조도
                noise:
                  $ref: '#/components/schemas/schedule/properties/noise'
                  # type: integer
                  # description: 소음
                temperature:
                  $ref: '#/components/schemas/schedule/properties/temperature'
                  # type: integer
                  # description: 온도 
                
      responses:
        200:
          $ref: '#/components/responses/200schedule'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
      security:
      - JWT: []
      
    delete:
      tags:
      - schedule
      summary: Deletes a schedule
      operationId: deleteScheduleById
      parameters:
      - name: schedule_id
        in: path
        description: Schedule id to delete
        required: true
        schema:
          type: integer
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Schedule not found
          content: {}
      security:
      - JWT: []
      
  /schedule/month/{date}:
    get:
      tags:
      - schedule
      summary: Get all schedules of user of specific month
      operationId: getScheduleByMonth
      parameters:
      - name: date
        in: path
        description: date 형식으로 받지만 년도, 월만 반영합니다
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/schedule'
      security:
      - JWT: []

  /user:
  
    post:
      tags:
      - user
      summary: Create user
      description: 유저를 생성할 때는 id, name, email, cellphone, password 만 받으면 될 것, user_id, email, cellphone 중복 확인, password는 어떤 암호화를 거칠지 합의
      operationId: createUser
      requestBody:
        description: Created user object
        # required: true
        content:
          application/json:
            schema:
              properties:
                user_id:
                  $ref: '#/components/schemas/user/properties/user_id'
                name:
                  $ref: '#/components/schemas/user/properties/name'
                email:
                  $ref: '#/components/schemas/user/properties/email'
                cellphone:
                  $ref: '#/components/schemas/user/properties/cellphone'
                password:
                  $ref: '#/components/schemas/user/properties/password'
        
              # $ref: '#/components/schemas/user'
              # 제외해야할 항목들이 생김
      responses:
        200:
          $ref: '#/components/responses/200user'
      
  /user/id:
  
    get:
      tags:
      - user
      summary: returns user_id info
      description: 아이디 찾기(get은 requestbody말고 path, query parameter만 사용가능)
      operationId: findId
      parameters:
      - name: name
        in: query
        description: 이름
        # required: true
        schema:
          type: string
      - name: email
        in: query
        description: 이메일
        # required: true
        schema:
          type: string
      # requestBody:
      #   description: 이름, 이메일
      #   content:
      #     application/json:
      #       schema:
      #         properties:
      #           name:
      #             $ref: '#/components/schemas/user/properties/name'
      #           email:
      #             $ref: '#/components/schemas/user/properties/email'
      responses:
        200:
          description: OK // 결과가 없으면 비어있는 JSON이 오게 됨
          content:
            application/json:
              schema:
                properties:
                  user_id:
                    $ref: '#/components/schemas/user/properties/user_id'
                
      
    
    
  /user/password:
    
    get:
      tags:
      - user
      summary: 비밀번호 재설정 인증(get은 requestbody말고 path, query)
      description: 정보가 모두 일치하면 해당되는 회원 정보를 돌려줍니다. (향후 정보수정 페이지에서 업데이트 하는 경우의 확장성을 위해) 해당하는 회원이 없는 경우 {}를 반환합니다.
      operationId: validatePasswordRenew
      parameters:
      - name: name
        in: query
        description: 이름
        # required: true
        schema:
          type: string
      - name: user_id
        in: query
        description: 아이디
        # required: true
        schema:
          type: string
      - name: email
        in: query
        description: 이메일
        # required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/200user'
      
    put:
      tags:
      - user
      summary: 비밀번호 재설정
      description: 재설정할 아이디와 비밀번호를 보내면
      operationId: updatePassword
      requestBody:
        description: 재설정할 비밀번호를 보내줍니다(id정보는 인증 단계에서 이미 가졌다고 가정)
        content:
          application/json:
            schema:
              properties:
                user_id:
                  $ref: '#/components/schemas/user/properties/user_id'
                password:
                  $ref: '#/components/schemas/user/properties/password'
      responses:
        200:
          description: user_id가 정상인 경우
          content:
            application/json:
              schema: 
                properties:
                  result:
                    type: string
                    enum:
                    - Password has been updated
        400:
          description: user_id에 해당하는 회원이 없는 경우
          content:
            application/json:
              schema: 
                properties:
                  result:
                    type: string
                    enum:
                    - Incorrect user_id given
          
          
            
      
  /user/login:
  
    post:
      tags:
      - user
      summary: Logs user into the system
      description: '아이디와 비밀번호를 제공하면  JWT값을 포함한 JSON을 반환합니다'
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              properties:
                user_id:
                  $ref: "#/components/schemas/user/properties/user_id"
                password:
                  $ref: "#/components/schemas/user/properties/password"
      # parameters:
      # - name: user_id
      #   in: query
      #   description: The user_id for login
      #   required: true
      #   schema:
      #     type: string
      # - name: password
      #   in: query
      #   description: The password for login(그대로? 암호화?)
      #   required: true
      #   schema:
      #     type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                properties:
                  user_id:
                    $ref: "#/components/schemas/user/properties/user_id"
                  access_token:
                    type: string
                    description: 이건 유효한 값이 아닙니다
                    example: asdklfhalksdhfjkahsdklfhasdfk.asldkjfhlaksjdhlkasdhlfasdjklf.alsdkjfhaksjdhflas
        400:
          description: Invalid username/password supplied
          content: {}
          
  /user/logout:
  
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logout
      responses:
        default:
          description: successful operation
          content: {}
      security:
      - JWT: []
          
  /user/{user_id}:
  
    get:
      tags:
      - user
      summary: Get user info by user_id
      operationId: getUserById
      description: ''
      parameters:
      - in: path
        name: user_id
        required: true
        schema:
          $ref: "#/components/schemas/daily/properties/date"
      responses:
        200:
          # $ref: '#/components/responses/200user'
          # ======================================
          description: OK
          content:
            application/json:
              schema:
                # $ref: '#/components/schemas/user'
                # ======================================
                allOf:
                - $ref: '#/components/schemas/user'
                - type: object
                  properties:
                    mytrophies:
                      description: 회원이 소유한 트로피만 반환한다
                      type: array
                      items:
                        $ref: '#/components/schemas/mytrophy'
                    mygroups:
                      description: 회원이 속한 그룹만 반환한다
                      type: array
                      items:
                        $ref: '#/components/schemas/group'
              
        400:
          description: Invalid user_id supplied
          content: {}
        404:
          description: User not found
          content: {}
      security:
      - JWT: []
      
    put:
      tags:
      - user
      summary: Update user
      description: |-
        This can only be done by the logged in user.
         현재 방식은 프론트엔드가 GET으로 갖고 온 정보에 변경될 내용만 override해서 json 형태로 보내주는 것임
         확인 필요한건, user의 모든 내용을 바꿀 수 있게 할 것인가...?
      operationId: updateUserById
      parameters:
      - name: user_id
        in: path
        description: user_id of user that need info to be updated
        required: true
        schema:
          type: string
      requestBody:
        description: Updated user object
        # required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
      responses:
        200:
          $ref: '#/components/responses/200user'
        400:
          description: Invalid user supplied
          content: {}
        404:
          description: User not found
          content: {}
      security:
      - JWT: []
      
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUserById
      parameters:
      - name: user_id
        in: path
        description: The user that needs to be deleted
        required: true
        schema:
          type: string
      responses:
        200:
          description: User deletion successful
          content: {}
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
      security:
      - JWT: []
      
  /average/daily/{date}:
  
    get:
      tags:
      - average
      summary: Get daily information
      description: |-
        This can only be done by the logged in user
        본인의 일간만 가져옴//
        기존 daily 모델 + 해당되는 모든 schedule도 포함하여 제공함//
        정말 필요한 정보만 집어넣자는 결론에 따라, 와이어프레임에서 요구하는 정보로 제한함. 그래프 Y축은 일정의 시간으로 합의했으므로, finished_at - started_at 로 구할 수 있음. 그리고 그 값을 0~100의 값으로 변환도 가능해보임. 만약 필요하다면 백엔드에서 계산해서 줄 수도 있으므로 리뷰시 정해주세요.
      operationId: getDailyByDate
      parameters:
      - in: path
        name: date
        required: true
        schema:
          $ref: "#/components/schemas/daily/properties/date"
      responses:
        200:
          description: Comment on daily successful
          content:
            application/json:
              schema:
                # $ref: '#/components/schemas/daily'
                # ====================================
                allOf:
                - $ref: '#/components/schemas/daily'
                - type: object
                  description: 'response의 schema에만 표출됨'
                  properties:
                    schedules:
                      type: array
                      items:
                        # $ref: '#/components/schemas/schedule'
                        # ========================================
                        type: object
                        properties:
                          schedule_id:
                            $ref: '#/components/schemas/schedule/properties/schedule_id'
                          title:
                            $ref: '#/components/schemas/schedule/properties/title'
                          started_at:
                            $ref: '#/components/schemas/schedule/properties/started_at'
                          finished_at:
                            $ref: '#/components/schemas/schedule/properties/finished_at'
                          time:
                            type: integer                    
        400:
          $ref: '#/components/responses/400'
      security:
      - JWT: []

    post:
      tags:
      - average
      summary: Comment on daily
      description: |-
        This can only be done by the logged in user
        본인의 일간에만 작성함
        POST와PUT중 하나만 있으면 되는거 아닐까요?? 처음에 튜플없을때는 daily, 있으면 put? 근데 프론트엔드에서 그걸 판단하고 보낼 수 있나요? 그냥 post로 통일하고 override하는게 낫지 않을까요? => 네 그래서 put은 삭제하고 post만 남겼습니다. 백엔드측 함수명(operationId)는 create로 남겨놓겠습니다만, 이미 존재하는 Date라면 update라고 인지해주시면 감사하겠습니다
      operationId: createDailyByDate
      parameters:
      - in: path
        name: date
        required: true
        schema:
          $ref: "#/components/schemas/daily/properties/date"
      requestBody:
        description: A JSON object containing updated(including origin) values to update daily
        content:
          application/json:
            schema:
              type: object
              properties:
                context:
                  $ref: '#/components/schemas/daily/properties/context'
      responses:
        200:
          description: Comment on daily successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/daily'
        400:
          $ref: '#/components/responses/400'
      security:
      - JWT: []
          
    delete:
      tags:
      - average
      summary: Delete Comment on daily
      description: |-
        This can only be done by the logged in user
        본인의 일간의 만 삭제함
        잠시만여 daily를 삭제할 수 있나요?? 그 날의 schedule이 모두 삭제되었을 때 자동으로 삭제하도록 하는거면 몰라도,,,,,,
        애초에 삭제 버튼이 와이어프레임에 없었는데, 이건 없애는게 낫지 않을까요? 그냥 수정을 context 빈 상태로 하는 것이 삭제가 아닐지..../
        와이어프레임을 다시 보니 수정에 대한 내용도 없...
      operationId: deleteDailyByDate
      parameters:
      - in: path
        name: date
        required: true
        schema:
          $ref: "#/components/schemas/daily/properties/date"
      responses:
        200:
          description: Delete Comment on daily successful
          content: {}
        400:
          $ref: '#/components/responses/400'
      security:
      - JWT: []
          
  /average/weekly/{year}/{week}:
    get:
      tags:
      - average
      summary: Get weekly information
      description: |-
        This can only be done by the logged in user
        본인의 주간만 가져옴
        Y축이 각 일간 스케쥴의 개수인거죠?(시간의 합이 아니라...)
      operationId: getWeeklyByWeek
      parameters:
      - in: path
        name: year
        required: true
        description: 주 단위의 값은 연도없이 조회가 불가하여 연도를 추가함
        schema:
          $ref: "#/components/schemas/schedule/properties/year"
      - in: path
        name: week
        required: true
        schema:
          $ref: "#/components/schemas/weekly/properties/week"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                # $ref: '#/components/schemas/weekly'
                # ================================
                allOf:
                - $ref: '#/components/schemas/weekly'
                - type: object
                  properties:
                    dailies:
                      type: array
                      items:
                        # $ref: '#/components/schemas/daily'
                        # =================================
                        type: object
                        properties:
                          date:
                            $ref: '#/components/schemas/daily/properties/date'
                          cntschedule:
                            type: integer
                
        400:
          $ref: '#/components/responses/400'
      security:
      - JWT: []
          
  /average/monthly/{date}:
    get:
      tags:
      - average
      summary: Get monthly information
      description: |-
        This can only be done by the logged in user
        본인의 월간만 가져옴
      operationId: getMonthlyByMonth
      parameters:
      - in: path
        name: date
        required: true
        description: date 형식으로 받지만 년도, 월만 반영합니다
        schema:
          $ref: "#/components/schemas/monthly/properties/month"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                # $ref: '#/components/schemas/monthly'
                # ====================================
                allOf:
                - $ref: '#/components/schemas/monthly'
                - type: object
                  properties:
                    weeklies:
                      type: array
                      items:
                        # $ref: '#/components/schemas/weekly'
                        # =================================
                        type: object
                        properties:
                          week:
                            $ref: '#/components/schemas/weekly/properties/week'
                          cntdaily:
                            type: integer
        400:
          $ref: '#/components/responses/400'
      security:
      - JWT: []
          
  /average/yearly/{year}:
    get:
      tags:
      - average
      summary: Get yearly information
      description: |-
        This can only be done by the logged in user
        본인의 연간만 가져옴
      operationId: getYearlyByYear
      parameters:
      - in: path
        name: year
        required: true
        schema:
          $ref: "#/components/schemas/yearly/properties/year"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                # $ref: '#/components/schemas/yearly'
                # ====================================
                allOf:
                - $ref: '#/components/schemas/yearly'
                - type: object
                  properties:
                    monthlies:
                      type: array
                      items:
                        # $ref: '#/components/schemas/monthly'
                        # =================================
                        type: object
                        properties:
                          month:
                            $ref: '#/components/schemas/monthly/properties/month'
                          cntdaily:
                            type: integer
        400:
          $ref: '#/components/responses/400'
      security:
      - JWT: []
      
  /group:
  
    post:
      tags:
      - group
      summary: create new group
      description: /group/namevalidation 을 통해 그룹명이 겹치지 않는지 중복확인 된 경우에만 요청을 보내주세요. 그룹을 생성한 사람이 자동적으로 첫 회원이자 관리자가 됩니다
      operationId: createGroup
      # https://swagger.io/docs/specification/describing-request-body/
      requestBody:
        description: A JSON object containing values to create new group
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/group/properties/name'
                context:
                  $ref: '#/components/schemas/group/properties/context'
                # 두 개 이상의 필수적인 inheritance는 왜 작동을 안하지: 해결
                  # type: string
                  # format: varchar
                  # type: string
                  # format: text
      responses:
        200:
          $ref: '#/components/responses/200group'
      security:
      - JWT: []
      
  /group/namevalidation:
  
    post:
      tags:
      - group
      summary: |-
        그룹 생성시 그룹 이름 중복 확인
      description: check if there is a group in that name so that it doesn't override
      operationId: checkGroupName
      # parameters:
      # - in: path
      #   name: name
      #   required: true
      #   schema:
      #     $ref: '#/components/schemas/group/properties/name'
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  $ref: '#/components/schemas/group/properties/name'
      responses:
        200:
          description: "true면 해당 이름의 그룹이 존재하므로, 중복 방지를 위해 거절"
          content:
            application/json:
              schema:
                type: object
                properties:
                  found:
                    type: boolean
      security:
      - JWT: []                    
                    
  /group/{group_id}:
  
    get:
      tags:
      - group
      summary: find group by group_id
      operationId: getGroupById
      parameters:
      - in: path
        required: true
        name: group_id
        schema:
          $ref: '#/components/schemas/group/properties/group_id'
      responses:
        200:
          description: Group found(includes list of members)
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/group'
                - type: object
                  properties:
                    members:
                      type: array
                      items:
                        allOf:
                          - $ref: '#/components/schemas/user'
                          - type: object
                            # required:
                            # - joined_at
                            # - is_groupadmin
                            properties:
                              joined_at:
                                type: string
                                format: datetime
                              is_groupadmin:
                                type: boolean
        400:
          $ref: '#/components/responses/400'
      security:
      - JWT: []          
          
    put:
      tags:
      - group
      summary: update group by group_id
      operationId: updateGroupById
      parameters:
      - in: path
        required: true
        name: group_id
        schema:
          $ref: '#/components/schemas/group/properties/group_id'
      # https://swagger.io/docs/specification/describing-request-body/
      requestBody:
        description: A JSON object containing updated values
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/group'
      responses:
        200:
          description: group updated
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/group'
                - type: object
                  properties:
                    members:
                      type: array
                      items:
                        allOf:
                          - $ref: '#/components/schemas/user'
                          - type: object
                            # required:
                            # - joined_at
                            # - is_groupadmin
                            properties:
                              joined_at:
                                type: string
                                format: datetime
                              is_groupadmin:
                                type: boolean
        400:
          $ref: '#/components/responses/400'
      security:
      - JWT: []
      
    delete:
      tags:
      - group
      summary: delete group by group_id
      operationId: deleteGroupById
      parameters:
      - in: path
        required: true
        name: group_id
        schema:
          $ref: '#/components/schemas/group/properties/group_id'
      responses:
        200:
          description: group deleted
          content: {}
        400:
          description: 400error
          content: {}
      security:
      - JWT: []
      
  /group/search:
  
    post:
      tags:
      - group
      summary: search group
      operationId: getGroupsBySearch
      description: 검색 내용을 보내면 해당되는 그룹들을 반환한다. url경로로 한글, 특수문자도 전달되면 그냥 get, query parameter로 받아도 될 것 같은데 확인 필요. 그리고 response에서 그룹 목록>그룹멤버>유저>가입한그룹>그룹멤버> .... 재귀형태가 일어날 것 같은데 확인 필요
      requestBody:
        description: "검색어"
        content:
          application/json:
            schema:
              type: object
              properties:
                q:
                  type: string
      # parameters:
      # - in: query
      #   required: true
      #   name: q
      #   schema:
      #     type: string
      responses:
        200:
          description: groups found
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/group'
                - type: object
                  properties:
                    members:
                      type: array
                      items:
                        allOf:
                          - $ref: '#/components/schemas/user'
                          - type: object
                            # required:
                            # - joined_at
                            # - is_groupadmin
                            properties:
                              joined_at:
                                type: string
                                format: datetime
                              is_groupadmin:
                                type: boolean
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
      security:
      - JWT: []          
      
      
components:

  schemas:
        
    schedule:
      # required:
      # - schedule_id
      type: object
      description: '시작예정/마감예정/실제시작/실제완료'
      properties:
        schedule_id:
          type: integer
        user_id:
          $ref: '#/components/schemas/user/properties/user_id'
        date:
          type: string
          format: date
          # $ref: '#/components/schemas/daily/properties/date'
        week:
          type: string
          format: week
          description: moment().isoweek()로 1년의 몇번째 주(weekofyear)인지 구할 수 있습니다
        month:
          type: string
          format: month
          description: moment().메서드로 1년의 몇번째 월인지 구할 수 있습니다
        year:
          type: string
          format: year
          description: 솔직히 연단위까지 필요한가 싶지만... 일단 넣어봅시다
        title:
          type: string
          format: varchar
        context:
          type: string
          format: text
        expectstart_at:
          type: string
          description: 설정 시작시간
        started_at:
          type: string
          description: 실제 시작시간
          format: date-time
        finished_at:
          type: string
          description: 실제로 완료한 시간
          format: date-time
        deadline_at:
          type: string
          description: 설정 마감일시
          format: date-time
        created_at:
          type: string
          description: 이 일정이 등록된 시간
          format: date-time
        updated_at:
          type: string
          description: 이 일정이 마지막으로 수정된 시간
          format: date-time
        point:
          type: integer
        is_finished:
          type: boolean
          default: false
        notification:
          type: boolean
          description: true면 일정에 대한 알림이 존재, false는 존재하지 않음
        notificationtime:
          type: string
          description: 알림이 있는 경우에는 datetime 형식으로, 없는 경우에는 0값으로(혹은 특정한 시간으로?)
          format: datetime
          # example: "2021-07-27T05:20:48.682Z"
        noti_extend:
          type: integer
          description: 알림을 연장한 횟수
        # 0803 회의 결과 nosql도입이전까지 평균 환경변수는 최소단위가 일정으로 1:1 관계로 두기보다 어트리뷰트로 합치기로 하였음
        humidity:
          type: integer
          description: 습도
        illuminance:
          type: integer
          description: 조도
        noise:
          type: integer
          description: 소음
        temperature:
          type: integer
          description: 온도          
        
  
    user:
      # required:
      # - user_id
      type: object
      description: 회원의 트로피와 그룹 가입 정보를 모델에 넣을 경우 group>user>mygroup>group 재귀의 시작이라 제거했으며 get 요청으로 가져오는 경우에 포함되도록 설계했습니다
      properties:
        user_id:
          type: string
          format: varchar(20)
          example: honggildong1!
        name:
          type: string
          example: 홍길동1!
        email:
          type: string
          example: hong1@korea.kr
        cellphone:
          type: string
          example: 010-1234-5678
        password:
          type: string
          example: "abcd1234!@#$"
        exp:
          type: integer
        is_admin:
          type: boolean
          description: |-
            true: admin,
            false: not admin,
            이때의 admin은 사이트 전체를 의미함, groupadmin과 다름
          default: false
        created_at:
          type: string
          format: date-time
        # 아래 array도 user에 필수적인 것 같지는 않은데,,, group>user>mygroup>group 재귀의 시작이라 제거
        # mytrophies:
        #   description: 회원이 소유한 트로피만 반환한다
        #   type: array
        #   items:
        #     $ref: '#/components/schemas/mytrophy'
        # mygroups:
        #   description: 회원이 속한 그룹만 반환한다
        #   type: array
        #   items:
        #     $ref: '#/components/schemas/group'
          
    daily:
      description: 하루 정리?하는 화면. JSON크기를 줄일 방법을 찾자.  / environment.created_at은 어느시점을 넣어놓을까
      # required:
      # - date
      type: object
      properties:
        date:
          $ref: '#/components/schemas/schedule/properties/date'
          # type: string
          # format: date
        week:
          $ref: '#/components/schemas/schedule/properties/week'
        month:
          $ref: '#/components/schemas/schedule/properties/month'
        year:
          $ref: '#/components/schemas/schedule/properties/year'
        user_id:
          $ref: '#/components/schemas/user/properties/user_id'
        context:
          type: string
          format: text
          example: 오늘은 너무 피곤했ㄷr....
        avgpoint:
          type: integer
          description: 해당 날짜의 schedule이 update(post/put)될때마다 계산해준다
        cntschedule:
          type: integer
          description: 해당 날짜의 schedule의 갯수입니다. 마찬가지로 update마다 계산필요.
        avgenvironment:
          $ref: '#/components/schemas/environment'
        # 모델이 schedule을 포함하는 것이 아니라 response에서 섞어서 보내주는걸로
        # schedules:
        #   type: array
        #   items:
        #     $ref: '#/components/schemas/schedule'
        
          
    weekly:
      description: 주간 내용을 보여주는데 주를 판별하는 방법은??? moment weekofyear를 사용할 수 있을 것 같다. / environment.created_at은 어느시점을 넣어놓을까
      # required:
      # - week
      type: object
      properties:
        week:
          $ref: '#/components/schemas/schedule/properties/week'
          # type: string
          # format: date
          # description: week를 date로 할지, 그냥 string형으로 할지, 기간을 잡을지...
        month:
          $ref: '#/components/schemas/schedule/properties/month'
        year:
          $ref: '#/components/schemas/schedule/properties/year'
        user_id:
          $ref: '#/components/schemas/user/properties/user_id'
        avgpoint:
          type: integer
          description: 해당 주의 schedule이 update(post/put)될때마다 계산해준다
        avgenvironment:
          $ref: '#/components/schemas/environment'
        # 모델이 daily를 포함하는 것이 아니라 response에서 섞어서 보내주는걸로
        # dailies:
        #   type: array
        #   items:
        #     $ref: '#/components/schemas/daily'
        
          
    monthly:
      description: 월간 내용을 보여주는데 다행히 월은 기준이 있다 / environment.created_at은 어느시점을 넣어놓을까
      # required:
      # - month
      type: object
      properties:
        month:
          $ref: '#/components/schemas/schedule/properties/month'
        year:
          $ref: '#/components/schemas/schedule/properties/year'        
        user_id:
          $ref: '#/components/schemas/user/properties/user_id'
        avgpoint:
          type: integer
          description: 해당 월의 schedule이 update(post/put)될때마다 계산해준다
        avgenvironment:
          $ref: '#/components/schemas/environment'
        # 모델이 weekly를 포함하는 것이 아니라 response에서 섞어서 보내주는걸로
        # weeklies:
        #   type: array
        #   items:
        #     $ref: '#/components/schemas/weekly'
      
    yearly:
      description: 연간 내용을 보여준다 / environment.created_at은 어느시점을 넣어놓을까
      # required:
      # - year
      type: object
      properties:
        year:
          type: string
          format: year
        user_id:
          $ref: '#/components/schemas/user/properties/user_id'
        avgpoint:
          type: integer
          description: 해당 년의 schedule이 update(post/put)될때마다 계산해준다
        avgenvironment:
          $ref: '#/components/schemas/environment'
        # 모델이 monthly를 포함하는 것이 아니라 response에서 섞어서 보내주는걸로
        # monthlies:
        #   type: array
        #   items:
        #     $ref: '#/components/schemas/monthly'
        

    group:
      type: object
      description: user 목록이 필요한데, user 내에 가입한 그룹도 표시되기 때문에 재귀적임. 어디에선가는 그 재귀를 끊어야할텐데. DB에는 group 테이블에 이정도만 남기겠습니다. 나머지는 MM관계를 통해 형성하시길...
      properties:
        group_id:
          type: integer
        name:
          type: string
          format: varchar()
          example: woorigroup
        context:
          type: string
          format: text
          example: 이것은 테스트하기 위한 우리의 그룹이므로 우리그룹이라 했지만 우리은행에 간 게 부럽다는 걸 표현하는 것은 절대 아니며
            그냥 string을 text 형태로 받으면 어떻게 프론트엔드에서 표현하실지 궁금해서 굳이 길게 쓰고 있는 중입니다.123
        pax:
          type: integer
          description: amount of person in this group
        ranking:
          type: integer
          description: ranking of group between all groups, based on WHAT???
          example: 40
        created_at:
          type: string
          format: datetime
          example: '2021-07-24T06:38:22.326Z'
        # DB기준으로 M:M관계이기에 group에 포함하기보다는 get했을 때 query로 받아오는 방식 
        # members:
        #   type: array
        #   description: user의 모든 속성과 가입/관리자 속성을 합치고 싶었는데... mytrohpy 참조해서 성공!
        #   items:
        #     allOf:
        #       - $ref: '#/components/schemas/user'
        #       - type: object
        #         # required:
        #         # - joined_at
        #         # - is_groupadmin
        #         properties:
        #           joined_at:
        #             type: string
        #             format: datetime
        #           is_groupadmin:
        #             type: boolean
        
    # 만들다보니 너무 더러워서 그냥 직접 requestBody에 작성
    # creategroupdata:
    #   allOf:
    #   - $ref: "#/components/schemas/group/properties/name"
    #   - $ref: "#/components/schemas/group/properties/context"
        
          
    trophy:
      type: object
      properties:
        trophy_id:
          type: integer
        title:
          type: string
          format: varchar
          example: 출석장인
        context:
          type: string
          format: varchar
          example: 10일 이상 출석합니다
        is_hidden:
          type: boolean
          description: 트로피가 회원에게 달성이전에도 보여지는지 정합니다
        exp:
          type: integer
          description: 해당 트로피를 획득시 회원이 얻게되는 경험치
        img:
          type: string
          description: 트로피의 픽토그램이나 이미지의 경로입니다(링크/파일 미정)
          format: url
      # mytrophy로 상속을 위해 필요..하지 않다 https://swagger.io/docs/specification/data-models/oneof-anyof-allof-not/
      # discriminator:
      #   propertyName: mytrophy
        
    mytrophy:
      allOf:
        - $ref: '#/components/schemas/trophy'
        - type: object
          properties:
            is_achieved:
              type: boolean
            achieved_at:
              type: string
              format: datetime
        
    environment:
      type: object
      description: 아직 센서의 측정값을 모르기 때문에 섣불리 하기 힘들다
      properties:
        humidity:
          type: integer
          description: 습도
        illuminance:
          type: integer
          description: 조도
        noise:
          type: integer
          description: 소음
        temperature:
          type: integer
          description: 온도
        created_at:
          type: string
          description: 측정된 시각
          format: datetime
          
    error:
      type: object
      # required:
      #   - code
      #   - message
      properties:
        code:
          type: string
          example: '400'
        message:
          type: string
          example: 'Bad Request'
          
    JWT:
      type: object
      description: JWT이 어떻게 생겼는지 궁금하실 분들은 위해 payload부분을 보여드립니다.
      properties:
        user_id:
          $ref: '#/components/schemas/user/properties/user_id'
          # type: string
        iat:
          type: integer
          example: 1628155053
          description: IOS표준에 따라 변환 필요합니다
        exp:
          type: integer
          example: 1628241453
          description: IOS표준에 따라 변환 필요합니다
          
  responses:
    # description: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status
    
    200user:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/user'

    200schedule:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/schedule'
    
    200group:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/group'

    
    400jwt:
      description: Bad Request
      content:
        application/json:
          schema:
            properties:
              name:
                type: string
                example: "JsonWebTokenError"
              message:
                type: string
                example: "invalid signature"

            
    400:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
            
    401:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
            
    404:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
        
    # ApiResponse:
    #   type: object
    #   properties:
    #     code:
    #       type: integer
    #       format: int32
    #       example:
    #       - "404"
    #       - "400"
    #     type:
    #       type: string
    #     message:
    #       type: string
          
  securitySchemes:
  
    JWT:
      type: apiKey
      name: access_token
      in: header
      
    # schedulestore_auth:
    #   type: oauth2
    #   flows:
    #     implicit:
    #       authorizationUrl: http://schedulestore.swagger.io/oauth/dialog
    #       scopes:
    #         write:schedules: modify schedules in your account
    #         read:schedules: read your schedules
            
    # api_key:
    #   type: apiKey
    #   name: api_key
    #   in: header
