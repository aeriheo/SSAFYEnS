openapi: 3.0.1
info:
  title: S05P12A109
  description: 여기 적혀있는건 예시입니다. 밑에 API부분만 봐주세요
#   termsOfService: http://swagger.io/terms/
#   contact:
#     email: apiteam@swagger.io
#   license:
#     name: Apache 2.0
#     url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
# externalDocs:
#   description: Find out more about Swagger
#   url: http://swagger.io
servers:
- url: https://schedulestore.swagger.io/basePath
- url: http://schedulestore.swagger.io/basePath
tags:
- name: schedule
  description: Everything about your schedules
  # externalDocs:
  #   description: Find out more
  #   url: http://swagger.io
- name: store
  description: Access to Schedules
- name: user
  description: Operations about user
- name: daily
  description: 하루 평가(용어 정리 필요)를 위한 내용입니다
- name: average
  description: 프론트엔드 기준 일간 주간 월간 일정 평가를 확인하는 내용입니다.
- name: group
  description: 그룹에 관한 내용입니다
  externalDocs:
    description: Find out more about our store
    url: http://swagger.io
paths:
  /schedule:
    post:
      tags:
      - schedule
      summary: Add a new schedule to user
      description: Form으로 받을지 JSON으로 받을지 결정 필요.
      operationId: addSchedule
      requestBody:
        description: Schedule object that needs to be added to the user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/schedules'
        required: true
      responses:
        200:
          description: 'successful operation: 해당 일정의 정보를 돌려줌'
          content:
            application/json:
              schema:
                type: object
        405:
          description: Invalid input
          content: {}
      security:
      - JWT: []
      x-codegen-request-body-name: body
  /schedule/findByStatus:
    get:
      tags:
      - schedule
      summary: Finds Schedules by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findSchedulesByStatus
      parameters:
      - name: status
        in: query
        description: Status values that need to be considered for filter
        required: true
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            default: available
            enum:
            - available
            - pending
            - sold
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/schedules'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/schedules'
        400:
          description: Invalid status value
          content: {}
      security:
      - schedulestore_auth:
        - write:schedules
        - read:schedules
  /schedule/findByTags:
    get:
      tags:
      - schedule
      summary: Finds Schedules by tags
      description: Muliple tags can be provided with comma separated strings. Use         tag1,
        tag2, tag3 for testing.
      operationId: findSchedulesByTags
      parameters:
      - name: tags
        in: query
        description: Tags to filter by
        required: true
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/schedules'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/schedules'
        400:
          description: Invalid tag value
          content: {}
      deprecated: true
      security:
      - schedulestore_auth:
        - write:schedules
        - read:schedules
  /schedule/{schedule_id}:
    get:
      tags:
      - schedule
      summary: Find schedule by ID
      description: Returns a single schedule
      operationId: getScheduleById
      parameters:
      - name: schedule_id
        in: path
        description: ID of schedule to return
        required: true
        schema:
          type: integer
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/schedules'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Schedule not found
          content: {}
      security:
      - JWT: []
    put:
      tags:
      - schedule
      summary: Updates a schedule with form data
      operationId: updateScheduleWithForm
      parameters:
      - name: schedule_id
        in: path
        description: ID of schedule that needs to be updated
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                title:
                  type: string
                  description: Updated name of the schedule
                context:
                  type: string
                  description: Updated context of the schedule
                started_at:
                  type: string
                  description: Updated started_at of the schedule
                  format: datetime
                deadline_at:
                  type: string
                  description: Updated deadline_at of the schedule
                  format: datetime
                point:
                  type: integer
                  description: Updated point of the schedule
                  format: int32
                is_finished:
                  type: boolean
                  description: Updated is_finished of the schedule
                notification:
                  type: string
                  description: Updated notification of the schedule
                noti_extend:
                  type: integer
                  description: Updated noti_extend of the schedule
                  format: int32
      responses:
        405:
          description: Invalid input
          content: {}
      security:
      - JWT: []
    delete:
      tags:
      - schedule
      summary: Deletes a schedule
      operationId: deleteSchedule
      parameters:
      - name: schedule_id
        in: path
        description: Schedule id to delete
        required: true
        schema:
          type: integer
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Schedule not found
          content: {}
      security:
      - JWT: []
  /schedule/{scheduleId}/uploadImage:
    post:
      tags:
      - schedule
      summary: uploads an image
      operationId: uploadFile
      parameters:
      - name: scheduleId
        in: path
        description: ID of schedule to update
        required: true
        schema:
          type: integer
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                additionalMetadata:
                  type: string
                  description: Additional data to pass to server
                file:
                  type: string
                  description: file to upload
                  format: binary
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
      - schedulestore_auth:
        - write:schedules
        - read:schedules

  /user:
    post:
      tags:
      - user
      summary: Create user
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/users'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
      
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
      - name: user_id
        in: query
        description: The user_id for login
        required: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login(그대로? 암호화?)
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content: {}
        400:
          description: Invalid username/password supplied
          content: {}
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
          content: {}
  /user/{user_id}:
    get:
      tags:
      - user
      summary: Get user info by user_id
      description: 비밀번호도 포함되어서 전송되어야하는가? 아니면 수정할 것인가..
      operationId: getUserById
      parameters:
      - $ref: '#/components/schemas/users/properties/user_id'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/users'
        400:
          description: Invalid user_id supplied
          content: {}
        404:
          description: User not found
          content: {}
      security:
      - JWT: []
    put:
      tags:
      - user
      summary: Update user
      description: |-
        This can only be done by the logged in user.
         현재 방식은 프론트엔드가 GET으로 갖고 온 정보에 변경될 내용만 override해서 json 형태로 보내주는 것임
      operationId: updateUser
      parameters:
      - name: user_id
        in: path
        description: user_id of user that need info to be updated
        required: true
        schema:
          type: string
      requestBody:
        description: Updated user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/users'
        required: true
      responses:
        200:
          description: Update user successful
          content: {}
        400:
          description: Invalid user supplied
          content: {}
        404:
          description: User not found
          content: {}
      security:
      - JWT: []
      x-codegen-request-body-name: body
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: user_id
        in: path
        description: The user that needs to be deleted
        required: true
        schema:
          type: string
      responses:
        200:
          description: User deletion successful
          content: {}
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
      security:
      - JWT: []
      
  /daily/{date}:
  
    get:
      tags:
      - daily
      summary: Get Comment on daily
      description: |-
        This can only be done by the logged in user
        본인의 일간만 가져옴
      operationId: getCommentDaily
      parameters:
      - in: path
        name: date
        required: true
        schema:
          $ref: "#/components/schemas/daily/properties/date"
      responses:
        200:
          description: Comment on daily successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/daily'
        400:
          description: 400error
          content: {}
          
    put:
      tags:
      - daily
      summary: Update comment on daily
      description: |-
        This can only be done by the logged in user
        본인의 일간에만 작성함
      operationId: updateCommentDaily
      parameters:
      - in: path
        name: date
        required: true
        schema:
          $ref: "#/components/schemas/daily/properties/date"
      responses:
        200:
          description: Update Comment on daily successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/daily'
        400:
          description: 400error
          content: {}
          
    post:
      tags:
      - daily
      summary: Comment on daily
      description: |-
        This can only be done by the logged in user
        본인의 일간에만 작성함
        POST와PUT중 하나만 있으면 되는거 아닐까요?? 처음에 튜플없을때는 daily, 있으면 put? 근데 프론트엔드에서 그걸 판단하고 보낼 수 있나요? 그냥 post로 통일하고 override하는게 낫지 않을까요?
      operationId: createCommentDaily
      parameters:
      - in: path
        name: date
        required: true
        schema:
          $ref: "#/components/schemas/daily/properties/date"
      responses:
        200:
          description: Comment on daily successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/daily'
        400:
          description: 400error
          content: {}
          
    delete:
      tags:
      - daily
      summary: Delete Comment on daily
      description: |-
        This can only be done by the logged in user
        본인의 일간에만 작성함
      operationId: deleteCommentDaily
      parameters:
      - in: path
        name: date
        required: true
        schema:
          $ref: "#/components/schemas/daily/properties/date"
      responses:
        200:
          description: Delete Comment on daily successful
          content: {}
        400:
          description: 400error
          content: {}
          
  /group:
  
    post:
      tags:
      - group
      summary: create new group
      description: "requestBody key값 확인바람"
      operationId: createGroup
      # https://swagger.io/docs/specification/describing-request-body/
      requestBody:
        description: A JSON object containing values to create new group
        content:
          application/json:
            schema:
              type: object
              properties:
                - $ref: '#/components/schemas/group/properties/name'
                - $ref: '#/components/schemas/group/properties/context'
                # name:
                #   type: string
                #   format: varchar
                # context:
                #   type: string
                #   format: text

      responses:
        200:
          description: create group successful
          content: {}
          
  /group/{name}:
  
    get:
      tags:
      - group
      summary: |-
        check if there is a group in that name so that it doesn't override
        중복 확인
      operationId: checkGroupName
      parameters:
      - in: path
        name: name
        required: true
        schema:
          $ref: '#/components/schemas/group/properties/name'
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                type: object
                properties:
                  found:
                    type: boolean
                    
  /group/{group_id}:
  
    get:
      tags:
      - group
      summary: find group by group_id
      operationId: findGroupById
      parameters:
      - in: path
        required: true
        name: group_id
        schema:
          $ref: '#/components/schemas/group/properties/group_id'
      responses:
        200:
          description: group found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/group'
        400:
          description: 400error
          content: {}
          
    put:
      tags:
      - group
      summary: update group by group_id
      operationId: updateGroupById
      # https://swagger.io/docs/specification/describing-request-body/
      requestBody:
        description: A JSON object containing updated(including original) values
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/group'
      responses:
        200:
          description: group updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groups'
        400:
          description: 400error
          content: {}
    delete:
      tags:
      - group
      summary: delete group by group_id
      operationId: deleteGroupById
      parameters:
      - $ref: '#/components/schemas/group/properties/group_id'
      responses:
        200:
          description: group deleted
          content: {}
        400:
          description: 400error
          content: {}
          
components:

  schemas:
  
    users:
      required:
      - user_id
      type: object
      properties:
        user_id:
          type: string
          format: varchar(20)
          example: exampleuserid
        name:
          type: string
          example: 홍길동
        email:
          type: string
          example: hong@korea.kr
        cellphone:
          type: string
          example: 010-1234-5678
        password:
          type: string
        exp:
          type: integer
        created_at:
          type: string
          format: date-time
        is_admin:
          type: boolean
          description: |-
            true: admin
            false: not admin
          default: false
          
    daily:
      required:
      - date
      type: object
      properties:
        date:
          type: string
          format: date
        user_id:
          $ref: '#/components/schemas/users/properties/user_id'
        context:
          type: string
          format: text
          example: 오늘은 너무 피곤했ㄷr....
          
    schedules:
      required:
      - schedule_id
      type: object
      properties:
        schedule_id:
          type: integer
        user_id:
          $ref: '#/components/schemas/users/properties/user_id'
        date:
          $ref: '#/components/schemas/daily/properties/date'
        title:
          type: string
          format: varchar
        context:
          type: string
          format: text
        started_at:
          type: string
          description: 설정 시작시간
          format: date-time
        finished_at:
          type: string
          description: 실제로 완료한 시간
          format: date-time
        deadline_at:
          type: string
          description: 설정 마감일시
          format: date-time
        created_at:
          type: string
          description: 이 일정이 등록된 시간
          format: date-time
        updated_at:
          type: string
          description: 이 일정이 마지막으로 수정된 시간
          format: date-time
        point:
          type: integer
        is_finished:
          type: boolean
          default: false
        notification:
          type: string
          description: 알림이 있는 경우에는 datetime 형식으로, 없는 경우에는 0값으로(혹은 특정한 시간으로?)
          format: datetime
          example: ""
        noti_extend:
          type: integer
          description: 알림을 연장한 횟수


    group:
      type: object
      properties:
        group_id:
          type: integer
        name:
          type: string
          format: varchar()
          example: woorigroup
        context:
          type: string
          format: text
          example: 이것은 테스트하기 위한 우리의 그룹이므로 우리그룹이라 했지만 우리은행에 간 게 부럽다는 걸 표현하는 것은 절대 아니며
            그냥 string을 text 형태로 받으면 어떻게 프론트엔드에서 표현하실지 궁금해서 굳이 길게 쓰고 있는 중입니다.123
        created_at:
          type: string
          format: datetime
          example: 2021-07-24T06:38:22.326Z
        pax:
          type: integer
          description: amount of person in this group
        ranking:
          type: integer
          description: ranking of group between all groups, based on WHAT???
          example: 40
          
    # 만들다보니 너무 더러워서 그냥 직접 requestBody에 작성
    # creategroupdata:
    #   allOf:
    #   - $ref: "#/components/schemas/group/properties/name"
    #   - $ref: "#/components/schemas/group/properties/context"
          
    groups:
      type: array
      items:
        $ref: '#/components/schemas/group'
          
    trophy:
      type: object
      properties:
        trophy_id:
          type: integer
        title:
          type: string
          format: varchar
          example: 출석장인
        context:
          type: string
          format: varchar
          example: 10일 이상 출석합니다
        is_hidden:
          type: boolean
          description: 트로피가 회원에게 달성이전에도 보여지는지 정합니다
        exp:
          type: integer
          description: 해당 트로피를 획득시 회원이 얻게되는 경험치
        img:
          type: string
          description: 트로피의 픽토그램이나 이미지의 경로입니다(링크/파일 미정)
          format: url
      # mytrophy로 상속을 위해 필요..하지 않다 https://swagger.io/docs/specification/data-models/oneof-anyof-allof-not/
      # discriminator:
      #   propertyName: mytrophy
        
    trophies:
      type: array
      items:
        $ref: '#/components/schemas/trophy'
        
    mytrophy:
      allOf:
        - $ref: '#/components/schemas/trophy'
        - type: object
          properties:
            is_achieved:
              type: boolean
            achieved_at:
              type: string
              format: datetime
          
    mytrophies:
      type: array
      items:
        $ref: '#/components/schemas/mytrophy'
        
    environment:
      type: object
      properties:
        humidity:
          type: integer
          description: 습도
        illuminance:
          type: integer
          description: 조도
        noise:
          type: integer
          description: 소음
        temperature:
          type: integer
          description: 온도
        created_at:
          type: string
          description: 측정된 시각
          format: datetime
          
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
          
  securitySchemes:
    JWT:
      type: apiKey
      name: access_token
      in: header
    schedulestore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://schedulestore.swagger.io/oauth/dialog
          scopes:
            write:schedules: modify schedules in your account
            read:schedules: read your schedules
            
    api_key:
      type: apiKey
      name: api_key
      in: header
